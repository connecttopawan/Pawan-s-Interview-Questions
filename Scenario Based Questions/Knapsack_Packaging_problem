Ques:	An automated packaging system is responsible for packing boxes. A box is certified to hold a certain weight. Given an integer total, calculate the number of possible ways to achieve total as a sum of weights of items weighing integer from 1 to k, inclusive.
Sol: 
def ways_to_sum(total, k):
    C = [[0 for i in range(k+1)]for i in range(total+1)]
 
    # Calculate value of Binomial Coefficient in bottom up manner
    for i in range(0,n+1,1):
        for j in range(0,min(i, k)+1,1):
            # Base Cases
            if (j == 0 or j == i):
                C[i][j] = 1
 
            # Calculate value using previously stored values
            else:
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]
 
    return C[total][k]
    

def knapsack(total,k):
    T = [[0 for i in range(k+1)] for i in range(total+1)]
    
    if total==0 or k==0:
        return 0
    if T[total][k]!=0:
        return T[total][k]
    if (k>total):
        T[total][k]=knapsack(total,k-1)
        return T[total][k]
    else:
        T[total][k]=max(k+knapsack(total-k,k-1),knapsack(total,k-1))
        return T[total][k]
        
if __name__=='__main__':
    total=5
    k=3
    print(knapsack(total,k))